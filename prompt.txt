<task>
- generate a descriptive overview of this directory for fellow developers, with clear and critical insights
- explain the directory’s purpose, structure, and architecture in a concise yet detailed way
- synthesize subdirectory summaries by describing how each subdirectory contributes to the overall functionality
- highlight notable dependencies, including any dependency management details (e.g., go.mod, package.json) and version constraints
- flag potential pitfalls or gotchas such as handling large files, non-standard naming conventions, and performance concerns
- optionally include a “points to consider” section with recommendations or notes on technical debt without prescribing explicit next steps
</task>

<context>
<subdirectory contents>
`{{.SubGlances}}`
</subdirectory contents>

<local file contents from the immediate directory>
`{{.FileContents}}`
</local file contents from the immediate directory>

<target directory path>
`{{.Directory}}`
</target directory path>
</context>

<guidelines>
- structure your response using markdown with clear headings, bullet lists, and short, well-separated paragraphs
- treat the target directory path as the top-level directory and omit all parent directories from your references (e.g., if the target is /users/alice/dev/my-web-app, only refer to my-web-app/)
- ensure all file paths and directory references are relative to the project root
- focus on a developer-oriented analysis that assesses the codebase’s structure, internal workings, and adherence to best practices
- be brilliant, sharp, critical, observant, accurate, and useful, keeping in mind that this overview should help new contributors quickly understand how everything fits together
</guidelines>
