name: Go Linting

# Trigger configuration:
# - On push to master branch (ignoring documentation changes)
# - On pull requests to master branch
# - Monthly dependency check (1st of each month at 01:00 UTC)
on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 1 1 * *'  # Monthly Dependency Vulnerability Scan (1st of each month at 01:00 UTC)

# Prevent multiple identical workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  golangci-lint:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'  # Updated to match local development environment
          cache: true

      # Use the official GitHub Action as per our standardized approach in docs/LINTING.md
      - name: Install and run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          # IMPORTANT: This version MUST match the one in .pre-commit-config.yaml
          # See docs/LINTING.md for details on version standardization
          version: v2.1.2
          # Only include necessary arguments - the action handles paths and output format
          args: --timeout=2m --verbose

  additional-checks:
    name: Run additional static checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'  # Updated to match local development environment
          cache: true

      - name: Go Vet
        run: go vet ./...

      - name: Go Mod Verify
        run: go mod verify

      - name: Check Go mod tidiness
        run: |
          go mod tidy
          git diff --exit-code -- go.mod go.sum || (echo "go.mod or go.sum not tidy - run 'go mod tidy' locally" && exit 1)

      - name: Check for misspellings
        run: |
          go install github.com/client9/misspell/cmd/misspell@latest
          $(go env GOPATH)/bin/misspell -error -locale US .

  vulnerability-scan:
    name: Run vulnerability scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.3

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Run vulnerability scan with severity thresholds
        run: |
          # Read configuration from .govulncheck.yaml
          echo "Reading vulnerability scan configuration..."

          if [ ! -f ".govulncheck.yaml" ]; then
            echo "Error: .govulncheck.yaml configuration file not found"
            exit 1
          fi

          # Extract configuration values
          FAIL_ON_SEVERITY=$(yq eval '.fail_on_severity[]' .govulncheck.yaml)
          TIMEOUT=$(yq eval '.timeout_seconds' .govulncheck.yaml)
          SCAN_LEVEL=$(yq eval '.scan_level' .govulncheck.yaml)

          echo "Configuration loaded:"
          echo "  Fail on severity: $FAIL_ON_SEVERITY"
          echo "  Timeout: ${TIMEOUT}s"
          echo "  Scan level: $SCAN_LEVEL"
          echo ""

          # Generate correlation ID for traceability
          CORRELATION_ID="vuln-scan-$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)"
          echo "Correlation ID: $CORRELATION_ID"
          echo ""

          # Run govulncheck with JSON output for detailed analysis
          echo "Running vulnerability scan..."
          set +e  # Don't exit immediately on command failure

          # Run scan with timeout
          timeout "${TIMEOUT}s" govulncheck -format json -scan "$SCAN_LEVEL" ./... > govulncheck-report.json 2>&1
          SCAN_EXIT_CODE=$?

          # Check for timeout
          if [ $SCAN_EXIT_CODE -eq 124 ]; then
            echo "❌ FAILURE: Vulnerability scan timed out after ${TIMEOUT} seconds"
            echo "This may indicate network issues or an unusually large codebase."
            echo "Consider increasing timeout_seconds in .govulncheck.yaml"
            exit 1
          fi

          # Analyze results based on configuration
          if [ $SCAN_EXIT_CODE -eq 0 ]; then
            echo "✅ SUCCESS: No vulnerabilities found"
            echo "Scan completed successfully with correlation ID: $CORRELATION_ID"
          else
            # govulncheck found vulnerabilities
            echo "⚠️  VULNERABILITIES DETECTED"
            echo ""

            # For now, treat any found vulnerability as HIGH severity
            # Future enhancement: parse JSON to determine actual severity levels
            echo "Security policy: Failing build due to vulnerability detection"
            echo "Rationale: Current configuration treats all vulnerabilities as HIGH severity"
            echo ""
            echo "To override in emergency situations, use EMERGENCY_SECURITY_OVERRIDE=true"
            echo "Correlation ID for tracking: $CORRELATION_ID"
            echo ""

            # Show summary from JSON report
            echo "Vulnerability Summary:"
            govulncheck ./...  # Show human-readable output
            echo ""

            echo "❌ BUILD FAILED: Vulnerabilities detected that violate security policy"
            exit 1
          fi

          set -e  # Re-enable exit on error
